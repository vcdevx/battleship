(()=>{"use strict";class t{constructor(t,e){this.length=t,this.sunk=!1,this.shipStatus=Array(t).fill(""),this.shipName=e}hit(t){if(t<0||t>=this.length)throw new Error("Invalid index");""===this.shipStatus[t]&&(this.shipStatus[t]="hit")}isSunk(){!0===this.shipStatus.every((t=>"hit"===t))&&(this.sunk=!0)}}let e=t=>Math.floor(Math.random()*t),s=()=>0==e(2)?"horizontal":"vertical";class i{constructor(t){this.board=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]],this.ships=[],this.name=t}placeShip(i,r,a,n,o){if("vertical"===n){if(r+i>10||!0===this.checkIfNotEmpty(i,r,a,n))return this.placeShip(i,e(10),e(10),s(),o);let h=new t(i);h.shipName=o,this.ships===[]?h.id=0:h.id=this.ships.length,this.ships.push(h);for(let t=0;t<i;t++){let e={shipIndex:void 0,shipID:h.id};if(""!==this.board[r+t][a])throw Error("ship can not be placed here vertically");e.shipIndex=t,this.board[r+t][a]=e}}if("horizontal"===n){if(a+i>10||!0===this.checkIfNotEmpty(i,r,a,n))return this.placeShip(i,e(10),e(10),s(),o);let h=new t(i);h.shipName=o,this.ships===[]?h.id=0:h.id=this.ships.length,this.ships.push(h);for(let t=0;t<i;t++){let e={shipIndex:void 0,shipID:h.id};if(""!==this.board[r][a+t])throw Error("ship can not be placed here horizontally");e.shipIndex=t,this.board[r][a+t]=e}}}receiveAttack(t,e){""===this.board[t][e]?this.board[t][e]="miss":"miss"==this.board[t][e]&&""==this.board[t][e]||this.ships[this.board[t][e].shipID].hit(this.board[t][e].shipIndex)}checkShipStatus(){return!!this.ships.every((t=>1==t.sunk))}checkIfNotEmpty(t,e,s,i){let r=!1;if("horizontal"===i&&void 0!==e){for(let i=0;i<t+1;i++)if(""!==this.board[e][s+i]){r=!0;break}return r}if("vertical"===i){let i=!1;for(let r=0;r<t;r++)if(""!==this.board[e+r][s]){i=!0;break}return i}}checkIfLost(){return this.ships.every((t=>1==t.sunk))}checkForNoHit(t,e){if(""===this.board[t][e])return!0;if("miss"!==this.board[t][e]&&""!==this.board[t][e]){if("miss"!==this.board[t][e]&&""===this.board[t][e])return!0;if("hit"!==this.ships[this.board[t][e].shipID].shipStatus[this.board[t][e].shipIndex])return!0;u()}else u()}clearShips(){this.ships=[],this.board=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]]}}class r{constructor(t){this.name=t,this.turn=!0}getName(){return this.name}setName(t){this.name=t}endTurn(t){1==this.turn&&(this.turn=!1,t.startTurn())}startTurn(){0==this.turn&&(this.turn=!0)}checkTurn(){return this.turn}attack(t,e,s,i){this.checkTurn()&&(i.receiveAttack(t,e),this.endTurn(s))}}const a=new r("player"),n=new r("ai"),o=new i("player"),h=new i("ai"),l=t=>{let e=document.querySelector(".playerBoardContainer"),s=document.querySelector(".aiBoardContainer");for(let i=0;i<t.board.length;i++)for(let r=0;r<t.board[i].length;r++){let a=document.createElement("div");a.classList.add("cell"),a.setAttribute("data-row",i),a.setAttribute("data-col",r),"player"==t.name?a.classList.add("playerCell"):"ai"==t.name&&a.classList.add("aiCell"),""!=t.board[i][r]&&"miss"!=t.board[i][r]&&("hit"===t.ships[t.board[i][r].shipID].shipStatus[t.board[i][r].shipIndex]&&(a.classList.remove("shipCell"),a.classList.add("hitCell")),0==t.ships[t.board[i][r].shipID].sunk?a.classList.add("shipCell"):1==t.ships[t.board[i][r].shipID].sunk&&a.classList.add("sunkCell")),"miss"===t.board[i][r]&&a.classList.add("missCell"),"player"==t.name?e.append(a):"ai"==t.name&&s.append(a)}};let d=t=>{let i=["Carrier","Battleship","Cruiser","Submarine","Destroyer"],r=[5,4,3,3,2];for(let a=0;a<5;a++)t.placeShip(r[a],e(10),e(10),s(),i[a])};const c=(t,e,s)=>{let i=document.querySelector(".gameStatus");i.textContent="Player's Turn",1==e.turn&&document.querySelectorAll(".aiCell").forEach((t=>{t.addEventListener("click",(t=>{if(!t.target.classList.contains("hitCell")&&!t.target.classList.contains("missCell")){let e=t.target.getAttribute("data-row"),s=t.target.getAttribute("data-col");h.receiveAttack(e,s),""!==h.board[e][s]&&"miss"!==h.board[e][s]&&h.ships[h.board[e][s].shipID].isSunk(),p("ai"),l(h),1==h.checkIfLost()?m("Player"):(a.endTurn(n),i.textContent="Enemy's Turn",setTimeout(u,1500))}}))}))},u=(t=e(10),s=e(10))=>{if(1==o.checkForNoHit(t,s)){if(o.receiveAttack(t,s),""!==o.board[t][s]&&"miss"!==o.board[t][s]&&o.ships[o.board[t][s].shipID].isSunk(),p("player"),l(o),1==o.checkIfLost())return m("Enemy");n.endTurn(a),c(0,a)}},p=t=>{"ai"==t?document.querySelector(".aiBoardContainer").innerHTML="":"player"==t&&(document.querySelector(".playerBoardContainer").innerHTML="")},m=t=>{a.turn=!1;let e=document.querySelector(".gameStatusContainer"),s=document.querySelector(".gameStatus");e.style.flexDirection="column",s.textContent=`${t} wins!`;let i=document.createElement("button");i.classList.add("reloadGameBtn"),i.textContent="Reload Game",e.append(i),i.addEventListener("click",y)},b=()=>{let t=document.createElement("button"),e=document.querySelector(".gameStatus");t.classList.add("resetBoardBtn"),t.textContent="Reset Board",e.append(t);let s=document.querySelector(".gameStatusContainer");s.style.flexDirection="row",t.addEventListener("click",(()=>{p("player"),o.clearShips(),d(o),l(o);let e=document.createElement("button");e.classList.add("startBtn"),e.textContent="Start Game",s.innerHTML="";let i=document.createElement("h3");i.classList.add("gameStatus"),i.textContent="",s.append(i),s.append(t),s.append(e),(()=>{let t=document.querySelector(".startBtn"),e=document.querySelector(".resetBoardBtn");document.querySelector(".gameStatus"),t.addEventListener("click",(()=>{t.style.display="none",e.style.display="none",d(h),p("ai"),l(h),a.startTurn(),c(0,a)}))})()}))},y=()=>{let t=document.querySelector(".gameStatusContainer");t.innerHTML="";let e=document.createElement("h3");e.classList.add("gameStatus"),e.textContent="",t.append(e),o.clearShips(),h.clearShips(),b(),p("player"),p("ai"),l(o),l(h)};b(),l(o),l(h)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,